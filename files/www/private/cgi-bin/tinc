#!/usr/bin/haserl --upload-dir=/tmp --upload-limit=10
<%
. /www/private/cgi-bin/shared.sh


[ -n "$GET_func" ] && func="$GET_func"
[ -n "$POST_func" ] && func="$POST_func"

send_file()
{
	local path="$1" name="$2" extra="$3"

	echo 'Content-Type: application/force-download'
	echo 'X-Download-Options: noopen'
	echo 'Content-Disposition: attachment; filename="'$name'"'
	echo 'Cache-Control: no-cache'
	echo
	echo -en "$extra"
	cat "$path"
	exit
}

send() {
	echo "content-type: text/plain"
	echo
	echo "$1"
	exit
}

add_net() {
	local net_name="$1"

	if uci get -q tinc.$net_name > /dev/null 2>&1; then
		#The entry already exists.
		send "(E) Ein Eintrag mit dem Namen 'net_name' existiert bereits."
	fi

	uci set -q tinc.$net_name=tinc-net
	uci set -q tinc.$net_name.enabled=1
	uci set -q tinc.$net_name.generate_keys=1
	uci set -q tinc.$net_name.Name=$net_name

	mkdir -p /etc/tinc/$net_name/hosts 2> /dev/null
	uci commit tinc 2> /dev/null
	#Network was added. Please reboot.
	send "(I) Netzwerk '$net_name' wurde hinzugef&uuml;gt. Bitte Neustarten."
}

import_public_key() {
	local net_name="$1" key_name="$2" src_path="$3"

	dst_path="/etc/tinc/$net_name/hosts/$key_name"

	[ `uci get -q tinc.$key_name` = "tinc-net" ] && {
		#There is a network with that name.
		send "(E) Es existiert bereits ein Netz mit dem Namen '$key_name'."
	}

	addr=`cat $src_path | head -n3 | sed -n -r 's/^[ \t]*Address[ \t]*=[ \t]*(.*)$/\1/pI'`
	port=`cat $src_path | head -n3 | sed -n -r 's/^[ \t]*Port[ \t]*=[ \t]*([0-9]*)$/\1/pI'`
	sed  '/-----/,/-----/!d' $src_path > $dst_path
	[ $? -ne 0 ] && {
		#Could not copy file to destination
		send "(E) Konnte Datei nicht nach '$dst_path' kopieren."
	}

	if [ `uci get -q tinc.$key_name` = "tinc-host" ]; then #update entry
		[ -z "$addr" ] && addr=`uci set -q tinc.$key_name.Address`
		[ -z "$port" ] && port=`uci set -q tinc.$key_name.Port`
	else #create new entry
		uci set -q tinc.$key_name=tinc-host
		uci set -q tinc.$key_name.enabled=0
		uci set -q tinc.$key_name.net=$net_name
	fi

	[ -z "$port" ] && port="655"
	uci set -q tinc.$key_name.Address="$addr"
	uci set -q tinc.$key_name.Port="$port"

	uci set -q tinc.$net_name.ConnectTo="`ls /etc/tinc/$net_name/hosts/ 2> /dev/null`"
	uci commit -q tinc
	#Settings for host in network has been set. Please reboot.
	send "(I) Einstellungen f&uuml;r host '$key_name' in Netzwerk '$net_name' wurden gespeichert. Bitte Neustarten."
}

import_private_key() {
	local net_name="$1" key_name="$2" src_path="$3"

	add_net "$net_name"

	mv "$src_path" "/etc/tinc/$net_name/rsa_key.priv"
}

set_settings() {
	uci set -q $1.$sec.$3="$4" || send "(E) Beim Speichern ist ein Fehler aufgetreten. Bitte Neustarten."
}

case $func in
	get_settings)
		send "`uci show tinc`"
	;;
	set_settings)
		env_foreach 'tinc' set_settings
		uci -q commit tinc
		send "(I) Einstellungen wurden gespeichert. Bitte Neustarten."
	;;
	import_key)
		net_name="$POST_net_name"
		key_name="$POST_key_file_name"
		src_path="$POST_key_file"

		if [ `cat "$src_path" | grep 'PRIVATE KEY' -c` -gt 0 ]; then
			import_private_key "$net_name" $key_name"" "$src_path"
		elif [ `cat "$src_path" | grep 'PUBLIC KEY' -c` -gt 0 ]; then
			import_public_key "$key_name" $key_name"" "$src_path"
		else
			#Invalid key file received.
			send "(E) Ung&uuml;ltige Schl&uuml;sseldatei erhalten."
		fi
	;;
	export_private_key)
		net_name="$POST_net_name"

		path="/etc/tinc/$net_name/rsa_key.priv"
		[ ! -f $path ] && {
			#Key file not found.
			send "(E) Schl&uuml;sseldatei '$path' wurde nicht gefunden."
		}

		send_file "$path" "$net_name"
	;;
	export_public_key)
		net_name="$POST_net_name"
		key_name="$POST_key_name"

		path="/etc/tinc/$net_name/hosts/$key_name"
		[ ! -f $path ] && {
			#Key file not found.
			send "(E) Schl&uuml;sseldatei '$path' wurde nicht gefunden."
		}

		if [ "$key_name" = `uci get -q tinc.$net_name.Name` ]; then
			#key_name is a net entry
			ifce=`uci get -q tinc.$key_name.BindToInterface`
			[ -z "$ifce" ] && ifce=`uci get -q network.wan.ifname`
			addr=`get_ip ${ifce%% *}`
		else
			#key_name is a host entry
			addr=`uci get -q tinc.$key_name.Address`
		fi
		port=`uci get -q tinc.$key_name.Port`

		echo 'X-Download-Options: noopen'
		echo 'Content-Type: text/plain; authoritative=true;'
		echo 'Content-Disposition: attachment; filename="'$key_name'"'
		echo
		[ -n "$addr" ] && echo "Address = $addr"
		[ -n "$port" ] && echo "Port = $port"
		echo
		cat $path
	;;
	del_host)
		net_name="$GET_net_name"
		host_name="$GET_host_name"

		rm -f /etc/tinc/$net_name/hosts/$host_name 2> /dev/null
		uci delete -q tinc.$host_name
		uci set -q tinc.$net_name.ConnectTo="`ls /etc/tinc/$net_name/hosts/ 2> /dev/null`"
		uci commit -q tinc

		#Host was added. Please reboot.
		send "(I) Host '$host_name' wurde gel&ouml;scht. Bitte Neustarten."
	;;
	add_net)
		add_net "$GET_net_name"
	;;
	del_net)
		net_name="$GET_net_name"

		for host in `uci get -q tinc.$net_name.ConnectTo`; do
			uci delete -q tinc.$host
		done
		uci delete -q tinc.$net_name
		rm -rf /etc/tinc/$net_name 2> /dev/null
		uci commit tinc 2> /dev/null

		#Net was removed. Please reboot.
		send "(I) Netzwerk '$net_name' wurde gel&ouml;scht. Bitte Neustarten."
	;;
	*)
		send "(E) tinc: '$func' not implemented."
	;;
esac
%>
